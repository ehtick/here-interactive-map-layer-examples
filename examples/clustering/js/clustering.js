/*
 * Copyright (C) 2021 HERE Europe B.V.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 * License-Filename: LICENSE
 */

export function calcFeaturePropertyStats(props, clustering) {
  // get the desired property value for each feature
  const propValues = props.map(p => clustering == 'hexbin'? p.aggregation && p.aggregation.qty : p.count);

  // convert to numbers to get min/max
  const numberValues = propValues
    .filter(x => typeof x === 'number' && !isNaN(x) && Math.abs(x) !== Infinity);

  let min, max, mean, median, stdDev, sigmaPercent, sigmaFloor, sigmaCeiling;

  if (numberValues.length > 0 ) {
    min = Math.min(...numberValues);
    max = Math.max(...numberValues);

    mean = numberValues.reduce((a,b) => a + b, 0) / numberValues.length;
    if (numberValues.length % 2 === 0) {
      median = (numberValues[(numberValues.length / 2)] + numberValues[(numberValues.length / 2) + 1]) / 2;
    }
    else {
      median = numberValues[((numberValues.length + 1) / 2)]
    }

    const squareDiffs = numberValues.map(value => {
      const diff = value - mean;
      const sqrDiff = diff * diff;
      return sqrDiff;
    });

    const avgSquareDiff = squareDiffs.reduce((a,b) => a + b, 0) / squareDiffs.length;
    stdDev = Math.sqrt(avgSquareDiff);

    // calculating sigmas and ranges using standard deviations
    sigmaFloor = mean - stdDev;
    sigmaCeiling = mean + stdDev;

    const sigmaCount = numberValues.reduce((total,amount) => {
      if ((amount > sigmaFloor) && (amount < sigmaCeiling)) {
        total += 1;
      }
      return total;
    }, 0);
    sigmaPercent = 100 - sigmaCount / numberValues.length
    // const sigmaOutside = numberValues.length - sigma.count
  }

  // count up the number of each unique property value
  const valueCounts = new Map(); // use map to preserve key types (e.g. avoid '[Object object]' string keys)
  for (let i = 0; i < propValues.length; i++) {
    const value = propValues[i];
    if (valueCounts.get(value) == null) {
      valueCounts.set(value, 0);
    }
    valueCounts.set(value, valueCounts.get(value) + 1);
  }

  // sort the list of properties by count
  const sortedValueCounts = Array.from(valueCounts.entries()).sort((a, b) => {
    const d = b[1] - a[1];
    if (d !== 0) {
      return d;
    }

    if (a < b) {
      return -1;
    }
    else if (b < a) {
      return 1;
    }
    else {
      return 0;
    }
  });

  return {
    uniqueCount: valueCounts.size,
    sortedValueCounts,
    min, max, median, mean, stdDev,
    sigmaPercent, sigmaFloor, sigmaCeiling
  };
}

var palette = {
default: { values: [[0.969, 0.984, 1], [0.957, 0.976, 0.996], [0.945, 0.969, 0.992], [0.929, 0.961, 0.988], [0.918, 0.953, 0.984], [0.906, 0.945, 0.98], [0.894, 0.937, 0.976], [0.882, 0.929, 0.973], [0.871, 0.922, 0.969], [0.859, 0.914, 0.965], [0.847, 0.906, 0.961], [0.831, 0.898, 0.957], [0.82, 0.89, 0.953], [0.808, 0.882, 0.949], [0.792, 0.871, 0.941], [0.776, 0.863, 0.937], [0.761, 0.855, 0.933], [0.745, 0.847, 0.925], [0.729, 0.839, 0.922], [0.71, 0.831, 0.914], [0.69, 0.824, 0.906], [0.671, 0.812, 0.902], [0.647, 0.804, 0.894], [0.627, 0.792, 0.89], [0.604, 0.78, 0.882], [0.58, 0.769, 0.875], [0.557, 0.757, 0.871], [0.533, 0.745, 0.863], [0.51, 0.729, 0.859], [0.486, 0.718, 0.851], [0.463, 0.702, 0.847], [0.439, 0.69, 0.839], [0.416, 0.675, 0.831], [0.392, 0.663, 0.827], [0.373, 0.647, 0.82], [0.349, 0.631, 0.812], [0.329, 0.62, 0.804], [0.31, 0.604, 0.796], [0.29, 0.588, 0.788], [0.271, 0.576, 0.78], [0.251, 0.561, 0.773], [0.235, 0.545, 0.761], [0.216, 0.529, 0.753], [0.2, 0.514, 0.745], [0.184, 0.498, 0.737], [0.169, 0.478, 0.725], [0.153, 0.463, 0.718], [0.137, 0.447, 0.706], [0.125, 0.431, 0.698], [0.11, 0.416, 0.686], [0.098, 0.4, 0.675], [0.086, 0.384, 0.659], [0.075, 0.369, 0.647], [0.063, 0.353, 0.631], [0.055, 0.333, 0.616], [0.047, 0.318, 0.6], [0.043, 0.302, 0.58], [0.039, 0.286, 0.561], [0.035, 0.271, 0.537], [0.035, 0.255, 0.514], [0.031, 0.239, 0.49], [0.031, 0.22, 0.467], [0.031, 0.204, 0.443], [0.031, 0.188, 0.42]] },
gray: { values:  [[0.058823529411764705,0.08627450980392157,0.12941176470588237],[0.06236601307189542,0.09847650171179582,0.14030999066293182],[0.06590849673202615,0.11067849361967008,0.15120821661998132],[0.06945098039215686,0.12288048552754435,0.16210644257703083],[0.07299346405228757,0.13508247743541862,0.1730046685340803],[0.07653594771241828,0.14728446934329287,0.1839028944911298],[0.08007843137254901,0.1594864612511671,0.19480112044817927],[0.08362091503267974,0.17168845315904138,0.20569934640522874],[0.08716339869281045,0.18389044506691565,0.21659757236227825],[0.09070588235294116,0.1960924369747899,0.22749579831932773],[0.09424836601307188,0.20829442888266417,0.23839402427637724],[0.0977908496732026,0.22049642079053844,0.2492922502334267],[0.10133333333333333,0.23269841269841268,0.2601904761904762],[0.10487581699346404,0.24490040460628693,0.2710887021475257],[0.10841830065359476,0.2571023965141612,0.28198692810457515],[0.11196078431372547,0.2693043884220354,0.29288515406162463],[0.11550326797385621,0.2815063803299097,0.3037833800186741],[0.11904575163398691,0.293708372237784,0.3146816059757236],[0.12258823529411764,0.30591036414565825,0.32557983193277307],[0.12613071895424835,0.3181123560535325,0.33647805788982255],[0.12967320261437906,0.3303143479614068,0.3473762838468721],[0.1332156862745098,0.34251633986928104,0.3582745098039215],[0.13675816993464052,0.3547183317771553,0.369172735760971],[0.14030065359477123,0.3669203236850295,0.3800709617180205],[0.14384313725490194,0.37912231559290377,0.39096918767507],[0.14738562091503266,0.39132430750077807,0.4018674136321195],[0.15092810457516337,0.4035262994086523,0.41276563958916895],[0.1544705882352941,0.41572829131652655,0.4236638655462185],[0.15801307189542482,0.4279302832244008,0.43456209150326797],[0.16155555555555554,0.4401322751322751,0.44546031746031745],[0.16509803921568625,0.45233426704014934,0.4563585434173669],[0.168640522875817,0.46453625894802364,0.46725676937441635],[0.1721830065359477,0.4767382508558979,0.4781549953314659],[0.17572549019607842,0.48894024276377224,0.4890532212885154],[0.1792679738562091,0.5011422346716464,0.49995144724556484],[0.18281045751633984,0.5133442265795207,0.5108496732026143],[0.18635294117647055,0.5255462184873949,0.5217478991596638],[0.1898954248366013,0.5377482103952692,0.5326461251167134],[0.193437908496732,0.5499502023031434,0.5435443510737628],[0.19698039215686275,0.5621521942110177,0.5544425770308123],[0.20052287581699343,0.574354186118892,0.5653408029878617],[0.20406535947712418,0.5865561780267662,0.5762390289449112],[0.2076078431372549,0.5987581699346405,0.5871372549019607],[0.2111503267973856,0.6109601618425149,0.5980354808590103],[0.21469281045751631,0.623162153750389,0.6089337068160596],[0.21823529411764703,0.6353641456582634,0.6198319327731092],[0.22177777777777774,0.6475661375661375,0.6307301587301587],[0.22532026143790848,0.6597681294740119,0.6416283846872082],[0.2288627450980392,0.671970121381886,0.6525266106442577],[0.23240522875816993,0.6841721132897604,0.6634248366013071],[0.2359477124183006,0.6963741051976345,0.6743230625583566],[0.23949019607843133,0.7085760971055088,0.6852212885154062],[0.24303267973856205,0.720778089013383,0.6961195144724556],[0.2465751633986928,0.7329800809212574,0.7070177404295052],[0.2501176470588235,0.7451820728291315,0.7179159663865546],[0.2536601307189542,0.7573840647370059,0.7288141923436041],[0.2572026143790849,0.7695860566448801,0.7397124183006535],[0.26074509803921564,0.7817880485527544,0.750610644257703],[0.26428758169934635,0.7939900404606286,0.7615088702147524],[0.26783006535947707,0.806192032368503,0.772407096171802],[0.2713725490196078,0.8183940242763771,0.7833053221288514],[0.27491503267973855,0.8305960161842515,0.794203548085901],[0.27845751633986926,0.8427980080921257,0.8051017740429504],[0.282,0.855,0.816]] },
black: { values:  [[0,0,0],[0.004476190476190476,0.013571428571428571,0.012952380952380951],[0.008952380952380951,0.027142857142857142,0.025904761904761903],[0.013428571428571427,0.04071428571428571,0.038857142857142854],[0.017904761904761902,0.054285714285714284,0.051809523809523805],[0.022380952380952376,0.06785714285714285,0.06476190476190476],[0.026857142857142854,0.08142857142857142,0.07771428571428571],[0.03133333333333333,0.09499999999999999,0.09066666666666666],[0.035809523809523805,0.10857142857142857,0.10361904761904761],[0.04028571428571428,0.12214285714285714,0.11657142857142856],[0.04476190476190475,0.1357142857142857,0.1295238095238095],[0.049238095238095234,0.14928571428571427,0.14247619047619045],[0.05371428571428571,0.16285714285714284,0.15542857142857142],[0.05819047619047618,0.1764285714285714,0.16838095238095235],[0.06266666666666666,0.18999999999999997,0.18133333333333332],[0.06714285714285713,0.20357142857142854,0.19428571428571426],[0.07161904761904761,0.21714285714285714,0.20723809523809522],[0.07609523809523808,0.2307142857142857,0.22019047619047616],[0.08057142857142856,0.24428571428571427,0.23314285714285712],[0.08504761904761904,0.25785714285714284,0.24609523809523806],[0.0895238095238095,0.2714285714285714,0.259047619047619],[0.09399999999999999,0.285,0.27199999999999996],[0.09847619047619047,0.29857142857142854,0.2849523809523809],[0.10295238095238093,0.3121428571428571,0.2979047619047619],[0.10742857142857141,0.3257142857142857,0.31085714285714283],[0.11190476190476188,0.33928571428571425,0.32380952380952377],[0.11638095238095236,0.3528571428571428,0.3367619047619047],[0.12085714285714284,0.3664285714285714,0.3497142857142857],[0.12533333333333332,0.37999999999999995,0.36266666666666664],[0.1298095238095238,0.3935714285714285,0.3756190476190476],[0.13428571428571426,0.4071428571428571,0.3885714285714285],[0.13876190476190475,0.4207142857142857,0.40152380952380945],[0.14323809523809522,0.4342857142857143,0.41447619047619044],[0.14771428571428571,0.4478571428571429,0.42742857142857144],[0.15219047619047615,0.4614285714285714,0.4403809523809523],[0.15666666666666665,0.47500000000000003,0.4533333333333333],[0.16114285714285712,0.48857142857142855,0.46628571428571425],[0.1656190476190476,0.5021428571428571,0.47923809523809524],[0.17009523809523808,0.5157142857142857,0.4921904761904761],[0.17457142857142857,0.5292857142857142,0.5051428571428571],[0.179047619047619,0.5428571428571428,0.518095238095238],[0.1835238095238095,0.5564285714285714,0.531047619047619],[0.18799999999999997,0.57,0.5439999999999999],[0.19247619047619047,0.5835714285714286,0.556952380952381],[0.19695238095238093,0.5971428571428571,0.5699047619047618],[0.2014285714285714,0.6107142857142858,0.5828571428571429],[0.20590476190476187,0.6242857142857142,0.5958095238095238],[0.21038095238095236,0.6378571428571429,0.6087619047619047],[0.21485714285714283,0.6514285714285714,0.6217142857142857],[0.21933333333333332,0.665,0.6346666666666666],[0.22380952380952376,0.6785714285714285,0.6476190476190475],[0.22828571428571426,0.6921428571428572,0.6605714285714286],[0.23276190476190473,0.7057142857142856,0.6735238095238094],[0.23723809523809522,0.7192857142857143,0.6864761904761905],[0.2417142857142857,0.7328571428571428,0.6994285714285714],[0.24619047619047618,0.7464285714285714,0.7123809523809523],[0.25066666666666665,0.7599999999999999,0.7253333333333333],[0.2551428571428571,0.7735714285714286,0.7382857142857142],[0.2596190476190476,0.787142857142857,0.7512380952380951],[0.26409523809523805,0.8007142857142857,0.7641904761904762],[0.2685714285714285,0.8142857142857142,0.777142857142857],[0.27304761904761904,0.8278571428571428,0.7900952380952381],[0.2775238095238095,0.8414285714285714,0.8030476190476189],[0.282,0.855,0.816]]}
}
var theme = 'gray';


export function getColor(value, {min, max}) {
    // returns a color for the palette and feature value
    var index = getValue(value, min, max); // index into palette
    if (index == null) {
      return 'rgba(128, 128, 128, 0.5)'; // handle null/undefined values
    }
    return getPaletteColor(index, 0.75);
  }
  
  function getValue(value, min, max) {
    var delta = max - min;
    var number = value;
  
    if (min == null || max == null || typeof number !== 'number' || isNaN(number)) {
      return null;
    }
  
    var ratio = (delta === 0 ? 1 : Math.max(Math.min(1 - ((max - number) / delta), 1), 0));
    return ratio;
  }
  
  function getPaletteColor (value, alpha = 1) {
    try {
      value = Math.max(Math.min(value, 1), 0); // clamp to 0-1
  
      const index = Math.round(value * (palette[theme].values.length-1));
      const color = palette[theme].values[index];
      return `rgba(${color.map(c => Math.floor(c * 255)).join(', ')}, ${alpha})`;
    
    }
    catch (e) {
      return 'rgba(128, 128, 128, 0.5)';
    }
  }


// calculate buckets for data by range and number of quantiles
export function quantiles({ numQuantiles, minFilter, range, step, valueCounts, valueColorFunction }) {
  if (!valueCounts || !range) {
      return [];
  }

  // add up the things in each bucket
  const bucket = [];
  for (let i = 0; i < numQuantiles; i++) {
      bucket[i] = valueCounts.reduce((total, [value, count]) => {
      // value = parseNumber(value);
      if ((value >= (step * i) + minFilter) && (value < (step * (i+1)) + minFilter)) {
          total += count;
      }
      return total;
      }, 0);
  }

  const quantileSum = bucket.reduce((a,b)=>a+b);//Math.max(...bucket);
  const quantilePercent = bucket.map(x => x / quantileSum);

  return quantilePercent.map((x, index) =>  {
      const count = bucket[index];
      // const columns = Math.ceil(x*numQuantiles);
      
      const from = (index*step + minFilter);
      const to = ((index+1)*step + minFilter);
      const percent = x * 100;

      const fromColor = valueColorFunction(from);
      const toColor = valueColorFunction(to);

      return {
      from,
      to,
      fromColor,
      toColor,
      count,
      percent
      };
  });
}